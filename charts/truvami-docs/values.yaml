# Default values for truvami-docs.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 2

# Better Auth Configuration
betterAuth:
  # Generate with: openssl rand -base64 32
  # Should be provided via external secret management
  secret: ""
  # Optional: existing secret containing Better Auth secret
  # If provided, it should contain the Better Auth secret key
  # When using existingSecret, the above secret value is ignored
  existingSecret: ""
  # Key name in the existing secret that contains the Better Auth secret
  # Only used when existingSecret is set
  existingSecretKey: "better-auth-secret"

# Application Configuration
app:
  # Public URL for the application (used for OAuth redirects)
  publicUrl: "https://dashboard.truvami.com"

# Keycloak OAuth Configuration
keycloak:
  # Discovery URL for OpenID Connect configuration
  discoveryUrl: "https://sso.sbcdc.ch/auth/realms/truvami/.well-known/openid-configuration"
  # OAuth client ID
  clientId: "dashboard"
  # OAuth client secret - should be provided via external secret
  clientSecret: ""
  # Optional: existing secret containing Keycloak client secret
  # If provided, it should contain the Keycloak client secret
  # When using existingSecret, the above clientSecret value is ignored
  existingSecret: ""
  # Key name in the existing secret that contains the Keycloak client secret
  # Only used when existingSecret is set
  existingSecretKey: "client-secret"

# Database Configuration
database:
  # PostgreSQL connection string
  # Format: postgresql://username:password@host:port/database
  # Should be provided via external secret
  # Note: When postgres.enabled=true, database connections will automatically use the pooler
  url: ""
  # Optional: existing secret containing database URL
  # If provided, it should contain the database connection string
  # When using existingSecret, the above url value is ignored
  existingSecret: ""
  # Key name in the existing secret that contains the database URL
  # Only used when existingSecret is set
  existingSecretKey: "jdbc-uri"

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: ghcr.io/truvami/docs-v2
  # This sets the pull policy for images.
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 3000

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: docs2.truvami.com
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# -- Expose the service via gateway-api HTTPRoute
# Requires Gateway API resources and suitable controller installed within the cluster
# (see: https://gateway-api.sigs.k8s.io/guides/)
httpRoute:
  # HTTPRoute enabled.
  enabled: false
  # HTTPRoute annotations.
  annotations: {}
  # Which Gateways this Route is attached to.
  parentRefs:
  - name: gateway
    sectionName: http
    # namespace: default
  # Hostnames matching HTTP header.
  hostnames:
  - docs2.truvami.com
  # List of rules and filters applied.
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /headers
  #   filters:
  #   - type: RequestHeaderModifier
  #     requestHeaderModifier:
  #       set:
  #       - name: My-Overwrite-Header
  #         value: this-is-the-only-value
  #       remove:
  #       - User-Agent
  # - matches:
  #   - path:
  #       type: PathPrefix
  #       value: /echo
  #     headers:
  #     - name: version
  #       value: v2

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

# Database migration configuration
migration:
  # Resource limits for migration job
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi

# PostgreSQL configuration
postgres:
  # Enable to create a PostgreSQL cluster using CloudNativePG
  # When enabled, a PostgreSQL cluster will be automatically created and configured
  enabled: true

  # Number of PostgreSQL replicas
  replicaCount: 1

  # PostgreSQL image configuration
  image:
    repository: ghcr.io/cloudnative-pg/postgresql
    tag: "18"

  # Storage configuration for PostgreSQL
  storage:
    size: 1Gi
    storageClass: ""

  # PostgreSQL configuration parameters
  sharedBuffers: "256MB"

  # Resource limits and requests for PostgreSQL pods
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 256Mi

  # Connection pooler configuration using PgBouncer
  pooler:
    instances: 1
    type: "rw"
    poolMode: "session"
    maxClientConn: "100"
    defaultPoolSize: "15"
    image:
      repository: ghcr.io/cloudnative-pg/pgbouncer
      tag: "1.24.1-23"
    resources:
      requests:
        memory: 64Mi
        cpu: 50m
      limits:
        memory: 128Mi
        cpu: 100m
    monitoring:
      enabled: true
      podMonitorLabels: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    parameters: {}

  # Backup configuration (requires object storage)
  backup:
    enable: false
    retentionPolicy: "30d"
    barmanObjectStore: {}
      # Example configuration for S3-compatible storage:
      # destinationPath: "s3://my-bucket/backups"
      # s3Credentials:
      #   accessKeyId:
      #     name: "postgres-backup-secret"
      #     key: "ACCESS_KEY_ID"
      #   secretAccessKey:
      #     name: "postgres-backup-secret"
      #     key: "SECRET_ACCESS_KEY"
      # wal:
      #   retention: "7d"
      # data:
      #   retention: "30d"

  # External PostgreSQL configuration (used when postgres.enabled is false)
  external:
    # Host of the external PostgreSQL server
    host: ""
    # Port of the external PostgreSQL server
    port: 5432
    # Database name
    database: "dashboard"
    # Username for the database connection
    username: "dashboard"
    # Password for the database connection (will be stored in secret)
    password: ""
    # Optional: existing secret containing database credentials
    # If provided, it should contain keys: DB_HOST, DB_PORT, DB_NAME, DB_USER, DB_PASSWORD
    # When using existingSecret, the above individual values are ignored
    existingSecret: ""
