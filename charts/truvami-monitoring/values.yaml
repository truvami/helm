nameOverride: ""
fullnameOverride: ""

# Default labels to be applied to all alerts
alertLabels:
  altravis_prod: "false"
  altravis_test: "true"
  code: "SBCC"
  customer: "truvami"

prometheus:
  enableRemoteWriteReceiver: false
  storageSize: "10Gi"
  retention: "10d"
  resources:
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "1"
      memory: "1Gi"

# Prometheus Rule configuration
prometheusRule:
  enabled: true
  interval: 30s
  labels: {}
  annotations: {}

# Alert Rules Configuration
# Each alert rule can be individually enabled/disabled and have configurable severity levels
alerts:
  # Deployment Version Monitoring
  deploymentVersions:
    enabled: true
    multipleVersions:
      enabled: true
      severity: warning
      duration: 5m
    longRunningMismatch:
      enabled: true
      severity: critical
      duration: 15m
    serviceVersionInfo:
      enabled: true
      severity: info
      duration: 1m

  # Service Health Monitoring
  serviceHealth:
    enabled: true
    bridgeDown:
      enabled: true
      severity: critical
      duration: 1m
    bridgeHighErrorRate:
      enabled: true
      severity: major
      duration: 2m
      threshold: 0.1

  # Device Battery Monitoring
  deviceBattery:
    enabled: true
    criticallyLow:
      enabled: true
      severity: minor
      duration: 1m
      threshold: 2.5
    veryLow:
      enabled: true
      severity: warning
      duration: 5m
      threshold: 2.8

  # Device Duty Cycle Monitoring
  # Monitors duty cycle events - flags sent by device when approaching 1% airtime limit
  deviceDutyCycle:
    enabled: true
    highDutyCycle:
      enabled: true
      severity: warning
      duration: 1h
      threshold: 10  # Alert when duty cycle count > 10 in 24 hours - indicates too frequent uplinks
    excessiveDutyCycle:
      enabled: true
      severity: critical
      duration: 1h
      threshold: 20  # Alert when duty cycle count > 20 in 24 hours - critical misconfiguration

  # Device Health Monitoring
  deviceHealth:
    enabled: true
    # Add other device health alerts here as needed

  # Kafka Monitoring
  kafka:
    enabled: true
    # Add kafka alerts configuration here

  # Database Monitoring
  database:
    enabled: true
    # Add database alerts configuration here

  # Gateway Monitoring
  gateway:
    enabled: true
    # Add gateway alerts configuration here

  # API Monitoring
  api:
    enabled: true
    grpcValidationErrors:
      enabled: true
      severity: major
      duration: 2m
      threshold: 0.1
    deviceNotFoundErrors:
      enabled: true
      severity: major
      duration: 2m
      threshold: 0.1
    webhookErrors:
      enabled: true
      severity: major
      duration: 2m
      threshold: 0.1
    authErrors:
      enabled: true
      severity: major
      duration: 2m
    securityErrors:
      enabled: true
      severity: major
      duration: 1m
      threshold: 0.5
    performanceIssues:
      enabled: true
      severity: minor
      duration: 5m

  # Bridge Consumer Monitoring
  bridgeConsumer:
    enabled: true
    # Add bridge consumer alerts configuration here

  # Siren Monitoring
  siren:
    enabled: true
    # Add siren alerts configuration here

  # Authentication Monitoring
  authentication:
    enabled: true
    # Add authentication alerts configuration here

  # Integration Monitoring
  integration:
    enabled: true
    # Add integration alerts configuration here

# Global alert defaults that can be overridden per alert
alertDefaults:
  severityLevels:
    info: info
    warning: warning
    minor: minor
    major: major
    critical: critical

# Watchdog configuration
watchdog:
  # Webhook URL for watchdog heartbeat (e.g., UptimeRobot heartbeat URL)
  # Set to empty string to disable webhook_url annotation
  webhookUrl: ""

# AlertManager configuration
alertmanager:
  enabled: true

  # Resource configuration for Alertmanager
  resources:
    requests:
      cpu: "50m"
      memory: "128Mi"
    limits:
      cpu: "500m"
      memory: "512Mi"

  # SMTP configuration for email notifications
  smtp:
    smarthost: "localhost:587"
    from: "alertmanager@truvami.com"
    # auth_username: ""
    # auth_password: ""

  # Notification receivers
  receivers:
    slack:
      enabled: false
      webhook_url: ""  # Set your Slack webhook URL here
      channel: "#alerts"

    email:
      enabled: false
      to: "alerts@truvami.com"

# Dashboard configuration
dashboards:
  enabled: true
  annotations:
    k8s-sidecar-target-directory: "/tmp/dashboards"

  # Jsonnet-based dashboard generation
  # =================================
  # Dashboards are built from Jsonnet sources in /dashboards/src/
  #
  # Development workflow:
  # 1. Edit dashboard sources: /dashboards/src/*.jsonnet
  # 2. Build dashboards: make build-dashboards
  # 3. Generated files are created in: charts/truvami-monitoring/dashboards-generated/
  # 4. Helm automatically includes generated files as ConfigMaps
  #
  # See docs/dashboard-development.md for detailed guide

  # Legacy dashboards - for backwards compatibility only
  # Use Jsonnet approach for all new dashboards
  general: {}
    # Example legacy dashboard:
    # old-dashboard:
    #   title: "Legacy Dashboard"
    #   panels: [...]

grafana:
  enabled: false

  ## Grafana's SMTP configuration
  ## NOTE: To enable, grafana.ini must be configured with smtp.enabled
  ## ref: http://docs.grafana.org/installation/configuration/#smtp
  smtp:
    # `existingSecret` is a reference to an existing secret containing the smtp configuration
    # for Grafana.
    existingSecret: ""
    userKey: "user"
    passwordKey: "password"

  ## Configure grafana datasources
  ## ref: http://docs.grafana.org/administration/provisioning/#datasources
  ##
  datasources:
    "datasources.yaml":
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          url: http://prometheus-operated:9090
          access: proxy
          isDefault: true

  sidecar:
    dashboards:
      enabled: true

  ingress:
    enabled: false
    className: ""
    annotations:
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
      nginx.ingress.kubernetes.io/server-snippets: |
        location / {
          proxysetheader Upgrade $httpupgrade;
          proxyhttpversion 1.1;
          proxysetheader X-Forwarded-Host $httphost;
          proxysetheader X-Forwarded-Proto $scheme;
          proxysetheader X-Forwarded-For $remoteaddr;
          proxysetheader Host $host;
          proxysetheader Connection "upgrade";
          proxycachebypass $httpupgrade;
          }
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
