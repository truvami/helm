# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# A Tera template to be rendered as the changelog's header.
# See https://keats.github.io/tera/docs/#introduction
header = """
# Changelog\n
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""
# A Tera template to be rendered for each release in the changelog.
# See https://keats.github.io/tera/docs/#introduction
body = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% if version -%}
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
    ## [Unreleased]
{% endif -%}

{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {%- for commit in commits %}
        - {{ commit.message | split(pat="\n") | first | upper_first | trim }}\
            {% if commit.remote.username %} by @{{ commit.remote.username }}{%- endif -%}
            {% if commit.remote.pr_number %} in \
            [#{{ commit.remote.pr_number }}]({{ self::remote_url() }}/pull/{{ commit.remote.pr_number }}) \
            {%- endif -%}
    {% endfor %}
{% endfor %}

{%- if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}
    ### New Contributors
{%- endif -%}

{% for contributor in github.contributors | filter(attribute="is_first_time", value=true) %}
  * @{{ contributor.username }} made their first contribution
    {%- if contributor.pr_number %} in \
      [#{{ contributor.pr_number }}]({{ self::remote_url() }}/pull/{{ contributor.pr_number }}) \
    {%- endif %}
{%- endfor %}\n

{%- if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}{% raw %}\n{% endraw -%}{% endif %}

"""
# A Tera template to be rendered as the changelog's footer.
# See https://keats.github.io/tera/docs/#introduction
footer = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% for release in releases -%}
    {% if release.version -%}
        {% if release.previous -%}
            {% if release.previous.version -%}
                [{{ release.version | trim_start_matches(pat="v") }}]: \
                    {{ self::remote_url() }}/compare/{{ release.previous.version }}...{{ release.version }}
            {% endif -%}
        {% endif -%}
    {% else -%}
        {% if release.previous -%}
            {% if release.previous.version -%}
                [unreleased]: {{ self::remote_url() }}/compare/{{ release.previous.version }}...HEAD
            {% endif -%}
        {% endif -%}
    {% endif -%}
{% endfor %}
<!-- generated by git-cliff -->
"""
# Remove leading and trailing whitespaces from the changelog's body.
trim = true

[git]
conventional_commits = true
filter_unconventional = true
require_conventional = false

# If true, any commit not matched by commit_parsers is dropped.
# This helps keep out noise while still letting us explicitly skip some types below.
filter_commits = true

# Match semver + RC tags
tag_pattern = "v[0-9]+\\.[0-9]+\\.[0-9]+(-rc\\.[0-9]+)?"

# Do not allow BREAKING CHANGE commits to be skipped by parsers
protect_breaking_commits = true

# Parsers: group desired types, and explicitly skip noise like chore/style.
commit_parsers = [
  # Skip noise first
  { message = "^chore",  skip = true },
  { message = "^style",  skip = true },
  { message = "^revert", skip = true },   # optional

  # Core groups
  { message = "^feat",     group = "Features" },
  { message = "^fix",      group = "Fixes" },
  { message = "^perf",     group = "Performance" },
  { message = "^refactor", group = "Refactors" },
  { message = "^docs",     group = "Documentation" },
  { message = "^ci",       group = "CI" },
  { message = "^test",     group = "Tests" },

  # Surface BREAKING CHANGE wherever it appears (message/body/footer)
  { body = "BREAKING CHANGE",  group = "Breaking Changes" },
  { footer = "BREAKING CHANGE", group = "Breaking Changes" },
]
